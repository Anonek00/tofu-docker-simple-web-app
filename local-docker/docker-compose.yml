version: '3.8'

# Networks
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  monitoring:
    driver: bridge

# Volumes
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

services:
  # NGINX as Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"              # main app port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - frontend
      - monitoring
    depends_on:
      - webapp
      - grafana
    restart: unless-stopped

  # NODE.JS APP - Main application container
  webapp:
    build:
      context: ./app
      dockerfile: .dockerfile
    container_name: node_webapp
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${APP_PORT}
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - frontend
      - backend
    ports:
      - "3500:3500"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./app/logs:/app/logs    # Application logs

  # MYSQL - Database
  mysql:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend
    ports:
      - "3306:3306"           # Port for debugging
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
      interval: 10s
    restart: unless-stopped

  # REDIS - Cache server
  redis:
    image: redis:alpine
    container_name: redis_cache
    volumes:
      - redis_data:/data
    networks:
      - backend
    ports:
      - "6379:6379"           # Port for debugging
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    restart: unless-stopped


  # PROMETHEUS - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
      - backend
      - frontend
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # GRAFANA - Dashboards and monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  # MYSQL EXPORTER - Gather metrics for Prometheus
  mysql-exporter:
    image: prom/mysqld-exporter:latest
    container_name: mysql_exporter
    networks:
      - backend
      - monitoring
    ports:
      - "9104:9104"  # Exporter port
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    command:
      - "--mysqld.username=exporter:super_strong_exporter_password"
      - "--mysqld.address=mysql:3306"
      - "--collect.info_schema.innodb_metrics"
      - "--collect.info_schema.processlist"
      - "--collect.global_status"

  # REDIS EXPORTER - Gather metrics for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_USER=
      - REDIS_PASSWORD=${REDIS_PASSWORD}  # From .env file
    networks:
      - backend
      - monitoring
    ports:
      - "9121:9121"  # Exporter port
    depends_on:
      - redis
    restart: unless-stopped
