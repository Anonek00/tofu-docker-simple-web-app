name: CI/CD Pipeline - Tofu Validation & Docker Build

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  TOFU_VERSION: "latest"
  DOCKER_BUILDKIT: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  MYSQL_DATABASE: ${{ vars.MYSQL_DATABASE }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  GRAFANA_ADMIN_USER: ${{ secrets.GRAFANA_ADMIN_USER}}
  GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD}}
  MYSQL_EXPORTER_USER: ${{ secrets.MYSQL_EXPORTER_USER }}
  MYSQL_EXPORTER_PASSWORD: ${{ secrets.MYSQL_EXPORTER_PASSWORD }}
  REDIS_PASSWORD: 
  NODE_ENV: ${{ vars.NODE_ENV }}
  APP_PORT: ${{ vars.APP_PORT }}

jobs:
    # JOB 1: VALIDATE TOFU ENVIRONMENTS
  validate-environments:
    name: Validate ${{ matrix.environment }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        environment: [dev, stage, prod]
      fail-fast: false
    
    defaults:
      run:
        working-directory: environments/${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: Validate environment
        run: |
          echo "Validating ${{ matrix.environment }} environment..."
          
          # Check if directory exists
          if [ ! -d "." ]; then
            echo "Environment directory not found"
            exit 1
          fi
          
          echo "Files in environment directory:"
          ls -la
          
          # Init, validate and plan in one step
          tofu init -migrate-state
          tofu validate
          
          if [ -f "terraform.tfvars" ]; then
            tofu plan -input=false -var-file="terraform.tfvars"
          else
            tofu plan -input=false
          fi
          
          echo "${{ matrix.environment }} validated successfully"


  # JOB 2: DOCKER BUILD AND TEST WITH COMPOSE
  docker-build-test:
    name: Docker Build & Integration Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./local-docker/app
          file: ./local-docker/app/.dockerfile
          push: false
          load: true
          tags: test-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate MySQL init.sql from template
        working-directory: ./local-docker/mysql
        run: |

          echo "Generating init.sql"
          envsubst < init.sql.template > init.sql

      # Full stack test with docker-compose to fix issues with connecting to database
      - name: Test application with docker-compose
        working-directory: ./local-docker/app
        run: |
          echo "Testing complete application stack..."
          
          # Build and run whole stack in background
          docker compose up --build -d
          
          # Wait for all services to start
          echo "Waiting for services to start..."
          sleep 30
          
          # Check all containers status
          echo "Checking container status..."
          docker compose ps
          
          # Check if all containers are working
          if ! docker compose ps | grep -E "(Up|healthy)"; then
            echo "Some containers failed to start"
            echo "Logs from failed containers:"
            docker compose logs
            exit 1
          fi
          
          # Test health check
          echo "Testing application health..."
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:3500/health; then
              echo "Application health check passed"
              break
            else
              echo "Attempt $attempt/$max_attempts failed, waiting 5s..."
              sleep 5
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "Application health check failed after $max_attempts attempts"
            echo "Application logs:"
            docker compose logs webapp
            exit 1
          fi
          
          # Basic endpoints testing
          echo "Testing API endpoints..."
          
          # Main page test
          if curl -f http://localhost/; then
            echo "Main page test passed"
          else
            echo "Main page test failed"
            exit 1
          fi
          
          # Users endpoint test
          if curl -f http://localhost/users; then
            echo "Users endpoint test passed"
          else
            echo "Users endpoint test failed (may be expected)"
          fi
          
          # Database connectivity test
          echo "Testing database connectivity..."
          if docker compose exec -T mysql mysql -u ${MYSQL_USER} -p${MYSQL_PASSWORD} -e "SELECT 1;"; then
            echo "Database connectivity test passed"
          else
            echo "Database connectivity test failed"
            docker compose logs mysql
            exit 1
          fi
          
          # Redis connectivity test
          echo "Testing Redis connectivity..."
          if docker compose exec -T redis redis-cli ping; then
            echo "Redis connectivity test passed"
          else
            echo "Redis connectivity test failed"
            docker compose logs redis
            exit 1
          fi
          
          echo "All integration tests passed!"

      - name: Cleanup test environment
        if: always()
        working-directory: ./local-docker/app
        run: |
          echo "Cleaning up test environment..."
          docker compose down -v
          docker system prune -f

      # Image security scan
      - name: Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-app:latest'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

      - name: Extract metadata for push
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Push Docker Image
        if: github.event_name != 'pull_request'
        run: |
          echo "Logging in to GitHub Container Registry..."
          echo ${{ secrets.DEPLOYMENT_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          IMAGE_NAME="ghcr.io/anonek00/anonekoolocalenv"
          IMAGE_TAG="${{ github.sha }}"
          SHORT_TAG=${IMAGE_TAG:0:7}
          
          echo "Tagging image as $IMAGE_NAME:$SHORT_TAG"
          docker tag test-app:latest $IMAGE_NAME:$SHORT_TAG
          
          echo "Pushing image $IMAGE_NAME:$SHORT_TAG"
          docker push $IMAGE_NAME:$SHORT_TAG
          
          echo "Image pushed successfully with tag: $SHORT_TAG"


      - name: Generate Test Report
        if: always()
        run: |
          echo "## Integration Test Results" >> test-report.md
          echo "" >> test-report.md
          echo "**Test Date:** $(date)" >> test-report.md  
          echo "**Image:** test-app:latest" >> test-report.md
          echo "" >> test-report.md
          echo "### Tests Performed:" >> test-report.md
          echo "- Docker Compose stack startup" >> test-report.md
          echo "- Application health check" >> test-report.md
          echo "- API endpoint tests" >> test-report.md
          echo "- Database connectivity" >> test-report.md
          echo "- Redis connectivity" >> test-report.md
          echo "- Security vulnerability scan" >> test-report.md

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-report
          path: test-report.md


    # JOB 3: PIPELINE SUMMARY
  summary:
    name: 📋 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [validate-environments, docker-build-test, generate-docs]
    if: always()
    
    steps:
      - name: Generate Pipeline Summary Report
        run: |
          # Basic header
          echo "# 🚀 Pipeline Report" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }} | **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }} by @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status table
          echo "## 📊 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Check each job result
          TOFU_STATUS="${{ needs.validate-environments.result }}"
          DOCKER_STATUS="${{ needs.docker-build-test.result }}"
          DOCS_STATUS="${{ needs.generate-docs.result }}"
          
          # Add status rows
          case $TOFU_STATUS in
            "success") echo "| 🌍 Tofu Environments | ✅ PASSED | All environments validated |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| 🌍 Tofu Environments | ❌ FAILED | Check Tofu configuration |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🌍 Tofu Environments | ⏭️ SKIPPED | Job was skipped |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          case $DOCKER_STATUS in
            "success") echo "| 🐳 Docker Build & Test | ✅ PASSED | Container built successfully |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| 🐳 Docker Build & Test | ❌ FAILED | Check Docker configuration |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 🐳 Docker Build & Test | ⏭️ SKIPPED | Job was skipped |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          case $DOCS_STATUS in
            "success") echo "| 📚 Documentation | ✅ PASSED | README updated |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| 📚 Documentation | ❌ FAILED | Documentation generation failed |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| 📚 Documentation | ⏭️ SKIPPED | Not main branch |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status and next steps
          if [[ "$TOFU_STATUS" == "success" && "$DOCKER_STATUS" == "success" ]]; then
            echo "## ✅ Pipeline SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All critical jobs passed! Application is ready for deployment. 🚀" >> $GITHUB_STEP_SUMMARY
          elif [[ "$TOFU_STATUS" == "failure" ]]; then
            echo "## ❌ Infrastructure FAILED" >> $GITHUB_STEP_SUMMARY
            echo "**Fix:** Check Tofu syntax and variables. Run \`tofu validate\` locally." >> $GITHUB_STEP_SUMMARY
          elif [[ "$DOCKER_STATUS" == "failure" ]]; then
            echo "## ❌ Docker Build FAILED" >> $GITHUB_STEP_SUMMARY
            echo "**Fix:** Check Docker configuration. Run \`docker compose up --build\` locally." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Partial Success" >> $GITHUB_STEP_SUMMARY
            echo "Some jobs failed or were skipped. Review individual job logs." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Quick links
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Quick Links:** [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) | [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "*Generated at $(date)*" >> $GITHUB_STEP_SUMMARY

      - name: Set Status Notification
        run: |
          TOFU_STATUS="${{ needs.validate-environments.result }}"
          DOCKER_STATUS="${{ needs.docker-build-test.result }}"
          
          if [[ "$TOFU_STATUS" == "success" && "$DOCKER_STATUS" == "success" ]]; then
            echo "::notice title=Success::✅ All jobs passed! Ready for deployment."
          elif [[ "$TOFU_STATUS" == "failure" ]]; then
            echo "::error title=Tofu Failed::❌ Infrastructure validation failed."
          elif [[ "$DOCKER_STATUS" == "failure" ]]; then
            echo "::error title=Docker Failed::❌ Docker build/test failed."
          else
            echo "::warning title=Issues::⚠️ Some jobs failed or were cancelled."
          fi
